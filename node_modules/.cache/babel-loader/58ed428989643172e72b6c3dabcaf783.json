{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co/';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    try {\n      if (response.status === 200) {\n        return response.json();\n      }\n    } catch (e) {\n      return e;\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    if (response.status === 400) {\n      throw new Error('Не все поля заполнены');\n    } else if (response.status === 401) {\n      throw new Error('Email не зарегестрирован');\n    } else return response.json();\n  }).then(data => {\n    if (data.token) {\n      localStorage.setItem('jwt', data.token);\n      return data.token;\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    return res.json();\n  }).then(data => data).catch(err => {\n    console.log(err);\n  });\n};","map":{"version":3,"sources":["/Users/artempudovkin/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","response","status","json","e","res","catch","err","console","log","authorize","Error","data","token","localStorage","setItem","getContent"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,gCAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFsB;AAM/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AANyB,GAAvB,CAAL,CAOJO,IAPI,CAOEC,QAAD,IAAc;AAClB,QAAI;AACA,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAJD,CAIE,OAAOC,CAAP,EAAU;AACR,aAAQA,CAAR;AACH;AACJ,GAfM,EAgBFJ,IAhBE,CAgBIK,GAAD,IAAS;AACX,WAAOA,GAAP;AACH,GAlBE,EAmBFC,KAnBE,CAmBKC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAnBb,CAAP;AAoBH,CArBM;AAsBP,OAAO,MAAMG,SAAS,GAAG,CAAClB,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AALyB,GAAvB,CAAL,CAMJO,IANI,CAMEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAM,IAAIS,KAAJ,CAAU,uBAAV,CAAN;AACH,KAFD,MAEO,IAAIV,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAChC,YAAM,IAAIS,KAAJ,CAAU,0BAAV,CAAN;AACH,KAFM,MAEA,OAAOV,QAAQ,CAACE,IAAT,EAAP;AACV,GAZM,EAaFH,IAbE,CAaIY,IAAD,IAAU;AACZ,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACZC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,KAAjC;AACA,aAAOD,IAAI,CAACC,KAAZ;AACH;AACJ,GAlBE,EAmBFP,KAnBE,CAmBKC,GAAD,IAAS;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GArBE,CAAP;AAsBH,CAvBM;AAyBP,OAAO,MAAMS,UAAU,GAAIH,KAAD,IAAW;AACjC,SAAOnB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACjCK,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASiB,KAAM;AAF5B;AAFwB,GAAzB,CAAL,CAOFb,IAPE,CAOIK,GAAD,IAAS;AACX,WAAOA,GAAG,CAACF,IAAJ,EAAP;AACH,GATE,EAUFH,IAVE,CAUIY,IAAD,IAAUA,IAVb,EAWFN,KAXE,CAWKC,GAAD,IAAS;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAbE,CAAP;AAcH,CAfM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co/';\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({email, password})\n    }).then((response) => {\n        try {\n            if (response.status === 200) {\n                return response.json();\n            }\n        } catch (e) {\n            return (e)\n        }\n    })\n        .then((res) => {\n            return res;\n        })\n        .catch((err) => console.log(err));\n};\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({email, password})\n    }).then((response) => {\n        if (response.status === 400) {\n            throw new Error('Не все поля заполнены')\n        } else if (response.status === 401) {\n            throw new Error('Email не зарегестрирован')\n        } else return response.json();\n    })\n        .then((data) => {\n            if (data.token) {\n                localStorage.setItem('jwt', data.token);\n                return data.token\n            }\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n}\n\nexport const getContent = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n    })\n        .then((res) => {\n            return res.json()\n        })\n        .then((data) => data)\n        .catch((err) => {\n            console.log(err)\n        })\n}"]},"metadata":{},"sourceType":"module"}