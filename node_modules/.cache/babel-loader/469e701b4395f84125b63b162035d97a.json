{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co/';\n\nconst checkResponse = response => response.ok ? response.json() : Promise.reject(`'Ошибка: ${response.status}'`);\n\nexport const register = ({\n  email,\n  password\n}) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkResponse);\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    if (response.status === 400) {\n      throw new Error('Не все поля заполнены');\n    } else if (response.status === 401) {\n      throw new Error('Email не зарегестрирован');\n    } else return response.json();\n  }).then(data => {\n    if (data.token) {\n      localStorage.setItem('jwt', data.token);\n      return data.token;\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    return res.json();\n  }).then(data => data).catch(err => {\n    console.log(err);\n  });\n};","map":{"version":3,"sources":["/Users/artempudovkin/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","checkResponse","response","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","body","JSON","stringify","then","authorize","Error","data","token","localStorage","setItem","catch","err","console","log","getContent","res"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,gCAAjB;;AAEP,MAAMC,aAAa,GAAIC,QAAD,IAAcA,QAAQ,CAACC,EAAT,GAAcD,QAAQ,CAACE,IAAT,EAAd,GAAgCC,OAAO,CAACC,MAAR,CAAgB,YAAWJ,QAAQ,CAACK,MAAO,GAA3C,CAApE;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAC3C,SAAOC,KAAK,CAAE,GAAEX,QAAS,SAAb,EAAuB;AAC/BY,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFsB;AAM/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AANyB,GAAvB,CAAL,CAOJO,IAPI,CAOChB,aAPD,CAAP;AAQH,CATM;AAUP,OAAO,MAAMiB,SAAS,GAAG,CAACT,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAOC,KAAK,CAAE,GAAEX,QAAS,SAAb,EAAuB;AAC/BY,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AALyB,GAAvB,CAAL,CAMJO,IANI,CAMEf,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAM,IAAIY,KAAJ,CAAU,uBAAV,CAAN;AACH,KAFD,MAEO,IAAIjB,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAChC,YAAM,IAAIY,KAAJ,CAAU,0BAAV,CAAN;AACH,KAFM,MAEA,OAAOjB,QAAQ,CAACE,IAAT,EAAP;AACV,GAZM,EAaFa,IAbE,CAaIG,IAAD,IAAU;AACZ,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACZC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,KAAjC;AACA,aAAOD,IAAI,CAACC,KAAZ;AACH;AACJ,GAlBE,EAmBFG,KAnBE,CAmBKC,GAAD,IAAS;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GArBE,CAAP;AAsBH,CAvBM;AAyBP,OAAO,MAAMG,UAAU,GAAIP,KAAD,IAAW;AACjC,SAAOV,KAAK,CAAE,GAAEX,QAAS,WAAb,EAAyB;AACjCY,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASQ,KAAM;AAF5B;AAFwB,GAAzB,CAAL,CAOFJ,IAPE,CAOIY,GAAD,IAAS;AACX,WAAOA,GAAG,CAACzB,IAAJ,EAAP;AACH,GATE,EAUFa,IAVE,CAUIG,IAAD,IAAUA,IAVb,EAWFI,KAXE,CAWKC,GAAD,IAAS;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAbE,CAAP;AAcH,CAfM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co/';\n\nconst checkResponse = (response) => response.ok ? response.json() : Promise.reject(`'Ошибка: ${response.status}'`)\n\nexport const register = ({email, password}) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({email, password})\n    }).then(checkResponse)\n};\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({email, password})\n    }).then((response) => {\n        if (response.status === 400) {\n            throw new Error('Не все поля заполнены')\n        } else if (response.status === 401) {\n            throw new Error('Email не зарегестрирован')\n        } else return response.json();\n    })\n        .then((data) => {\n            if (data.token) {\n                localStorage.setItem('jwt', data.token);\n                return data.token\n            }\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n}\n\nexport const getContent = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n    })\n        .then((res) => {\n            return res.json()\n        })\n        .then((data) => data)\n        .catch((err) => {\n            console.log(err)\n        })\n}"]},"metadata":{},"sourceType":"module"}